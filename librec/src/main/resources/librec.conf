################################################### General Settings #############################################
# dataset: item ratings and user social inforamtion
dataset.training.wins=D:\\temp\\ratings\\filmtrust-ratings.txt
dataset.training.lins=/home/path/to/datasets/ratings.txt

dataset.social.wins=-1
dataset.social.lins=-1

dataset.testing.wins=D:\\temp\\ratings\\filmtrust-test.txt
dataset.testing.lins=/home/path/to/datasets/ratings.txt

# Item Recommendation: threshold to convert rating values to binary ones (during data loading); 
# Note that not all item recommendation models require binary ratings; -1: disable conversion
val.binary.threshold=-1

# MISC
is.verbose=on
num.rand.seed=1
is.prediction.out=off

# Email notification
is.email.notify=off
mail.smtp.host=smtp.gmail.com
mail.smtp.port=465
mail.smtp.auth=true
mail.smtp.user=xxx@gmail.com
mail.smtp.password=xxxx
mail.to=xxx@email.address

# validation priority: 1. cross-validation; 2. (training) ratio; 3. given n; 4: given ratio
is.cross.validation=off
is.parallel.folds=on
num.kfold=5
val.ratio=0.2
num.given.n=5
val.given.ratio=0.8

# testing view of rating predictions: all/-1, cold-start; 
rating.pred.view=all

# item recommendations
is.ranking.pred=off
is.diverse.used=off
num.reclist.len=-1
num.ignor.items=-1


# prediction output
has.predictions.rating.output = on
predictions.rating.output.wins =D:\\temp\\ratings\\predictions.txt

# baseline & exts: GlobalAvg, UserAvg, ItemAvg, Random, Constant, MostPop; NMF, SlopeOne, Hybrid, PD, AR, PRankD; 
# ranking: CLiMF, WRMF, BPR, RankALS, RankSGD; 
# rating:  UserKNN, ItemKNN, RegSVD, BiasedMF, PMF, BPMF, SVD++, SocialMF, RSTE, TrustMF, SoRec, SoReg; 
recommender=UserKNN

################################################### Model-based Methods ##########################################
# general parameters for matrix factorization
val.learn.rate=0.01
max.learn.rate=-1

val.reg.user=0.35
val.reg.item=0.35
val.reg.social=1
num.factors=10
num.max.iter=100
val.momentum=0.8

# learn rate update: first check if bold driver, then consider constanly decay; if neither, keep unchanged.
is.bold.driver=on
is.undo.change=off
val.decay.rate=-1

# save learned model to files under the folder "Resulsts/#algorithm#". 
is.save.model=off

################################################### Memoroy-based Methods #########################################
# similarity method: PCC, COS, COS-Binary, MSD, CPC, exJaccard; -1 to disable shrinkage; Note: case insensitive
similarity=PCC
num.shrinkage=-1

# neighborhood size for memory-based methods; -1 to use as many as possible.
num.neighbors=50

################################################### Method-specific Settings #######################################

# options: Tr, Te, T; 
BPRMF.reg.j=0.00025

Hybrid.lambda=0.5

PD.sigma=2.5
PRankD.alpha=20

RankALS.is.sw=on
RSTE.alpha=0.4

SLIM.reg.l1=1.0
SLIM.reg.l2=5.0

SoRec.reg.c=1
SoRec.reg.z=0.001
SoReg.beta=0.01

TrustMF.model=Tr
WRMF.alpha=1